name: Rust CI/CD

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.read_version.outputs.version }}
      tag: ${{ steps.read_version.outputs.tag }}
      exists: ${{ steps.check_tag.outputs.exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Read version from Cargo.toml
        id: read_version
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d '"' -f2)
          echo "detected version: $VERSION"
          if [ -z "$VERSION" ]; then
            echo "❌ failed to read version from Cargo.toml"
            exit 1
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=v$VERSION" >> "$GITHUB_OUTPUT"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "${{ steps.read_version.outputs.tag }}" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

  test:
    needs: setup
    if: needs.setup.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run tests
        run: cargo test --all-features -- --nocapture

  fmt:
    needs: setup
    if: needs.setup.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install rustfmt
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
      - name: Check format
        run: cargo fmt -- --check

  clippy:
    needs: setup
    if: needs.setup.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install clippy
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - name: Run clippy
        run: cargo clippy --all-features -- -A warnings

  build:
    needs: setup
    if: needs.setup.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build release
        run: cargo build --release --all-features

  publish:
    needs: [setup, test, fmt, clippy, build]
    if: needs.setup.outputs.exists == 'false'
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.publish.outputs.published }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Login to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: echo "${{ secrets.CARGO_REGISTRY_TOKEN }}" | cargo login
      - name: Publish crate
        id: publish
        run: |
          echo "published=false" >> $GITHUB_OUTPUT
          if cargo publish --no-verify; then
            echo "published=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Publish failed or already published."
            exit 1
          fi

  tag:
    needs: publish
    if: needs.publish.outputs.published == 'true' && needs.setup.outputs.tag != ''
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "${{ needs.setup.outputs.tag }}" -m "Release ${{ needs.setup.outputs.tag }}"
          git push origin "${{ needs.setup.outputs.tag }}"

  release:
    needs: tag
    if: success()
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create GitHub Release
        run: |
          gh release create "${{ needs.setup.outputs.tag }}" \
            --title "${{ needs.setup.outputs.tag }}" \
            --notes "Release ${{ needs.setup.outputs.tag }}" \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: publish
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Output release info
        run: |
          PACKAGE_NAME=$(grep '^name' Cargo.toml | head -1 | cut -d '"' -f2)
          echo "✅ Successfully released version ${{ needs.setup.outputs.version }}"
          echo "📦 https://crates.io/crates/$PACKAGE_NAME"
          echo "🏷️  Tag: ${{ needs.setup.outputs.tag }}"
          echo "🚀 Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.setup.outputs.tag }}"
