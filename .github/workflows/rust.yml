name: rust

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.read_version.outputs.version }}
      tag: ${{ steps.read_version.outputs.tag }}
      exists: ${{ steps.check_tag.outputs.exists }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: install toml-cli
        run: cargo install toml-cli

      - name: read version
        id: read_version
        run: |
          VERSION=$(toml get Cargo.toml package.version --raw)
          echo "detected version: $VERSION"
          if [ -z "$VERSION" ]; then
            echo "❌ failed to read version from Cargo.toml"
            exit 1
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=v$VERSION" >> "$GITHUB_OUTPUT"

      - name: check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.read_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

  run_tests:
    needs: setup
    if: needs.setup.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: run cargo tests
        run: cargo test --all-features -- --nocapture

  check_format:
    needs: setup
    if: needs.setup.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: install rustfmt
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
      - name: run cargo fmt
        run: cargo fmt -- --check

  run_clippy:
    needs: setup
    if: needs.setup.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: install clippy
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - name: run cargo clippy
        run: cargo clippy --all-features -- -A warnings

  build_release:
    needs: setup
    if: needs.setup.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: run cargo check
        run: cargo check --release --all-features

  publish_crate:
    needs: [run_tests, check_format, run_clippy, build_release]
    if: needs.setup.outputs.exists == 'false'
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.try_publish.outputs.published }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: try to publish crate
        id: try_publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          set -e
          echo "published=false" >> $GITHUB_OUTPUT
          echo "${{ secrets.CARGO_REGISTRY_TOKEN }}" | cargo login
          if cargo publish --allow-dirty; then
            echo "published=true" >> $GITHUB_OUTPUT
          else
            echo "❌ publish failed, but continuing."
          fi

  create_tag:
    needs: publish_crate
    if: needs.publish_crate.outputs.published == 'true' && needs.setup.outputs.tag != ''
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: create git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "github action"
          git tag -a "${{ needs.setup.outputs.tag }}" -m "${{ needs.setup.outputs.tag }}"
          git push origin "${{ needs.setup.outputs.tag }}"

  create_release:
    needs: create_tag
    if: always() && needs.publish_crate.outputs.published == 'true' && needs.setup.outputs.tag != ''
    runs-on: ubuntu-latest
    steps:
      - name: create github release
        run: |
          gh release create "${{ needs.setup.outputs.tag }}" \
            --title "${{ needs.setup.outputs.tag }}" \
            --notes "release ${{ needs.setup.outputs.tag }}" \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  success_notice:
    needs: create_release
    if: needs.publish_crate.outputs.published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: output release info
        run: |
          PACKAGE_NAME=$(toml get Cargo.toml package.name --raw)
          echo "✅ released version ${{ needs.setup.outputs.version }}"
          echo "📦 https://crates.io/crates/${PACKAGE_NAME}"
          echo "🏷️ tag: ${{ needs.setup.outputs.tag }}"
          echo "🚀 release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.setup.outputs.tag }}"
