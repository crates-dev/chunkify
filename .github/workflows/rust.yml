name: Rust

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  Setup:
    runs-on: ubuntu-latest
    outputs:
      Version: ${{ steps.read_version.outputs.version }}
      Tag: ${{ steps.read_version.outputs.tag }}
      Exists: ${{ steps.check_tag.outputs.exists }}
    steps:
      - name: CheckoutCode
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: InstallRustToolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: CacheCargoRegistry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: InstallTomlCli
        run: cargo install toml-cli

      - name: ReadVersion
        id: read_version
        run: |
          VERSION=$(toml get Cargo.toml package.version --raw)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: CheckTag
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.read_version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  RunTests:
    needs: Setup
    if: needs.Setup.outputs.Exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: CheckoutCode
        uses: actions/checkout@v4
      - name: InstallRustToolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: RunCargoTests
        run: cargo test --all-features -- --nocapture

  CheckFormat:
    needs: Setup
    if: needs.Setup.outputs.Exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: CheckoutCode
        uses: actions/checkout@v4
      - name: InstallRustfmt
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
      - name: RunCargoFmt
        run: cargo fmt -- --check

  RunClippy:
    needs: Setup
    if: needs.Setup.outputs.Exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: CheckoutCode
        uses: actions/checkout@v4
      - name: InstallClippy
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
      - name: RunCargoClippy
        run: cargo clippy --all-features -- -A warnings

  BuildRelease:
    needs: Setup
    if: needs.Setup.outputs.Exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: CheckoutCode
        uses: actions/checkout@v4
      - name: BuildWithCargo
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: RunCargoCheck
        run: cargo check --release --all-features

  PublishCrate:
    needs: [RunTests, CheckFormat, RunClippy, BuildRelease]
    if: needs.Setup.outputs.Exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: CheckoutCode
        uses: actions/checkout@v4
      - name: PublishToCratesIo
        run: |
          cargo login "${{ secrets.CARGO_REGISTRY_TOKEN }}"
          cargo publish --allow-dirty
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  CreateTag:
    needs: PublishCrate
    runs-on: ubuntu-latest
    steps:
      - name: CheckoutCode
        uses: actions/checkout@v4

      - name: DebugTagValue
        run: echo "Tag='${{ needs.Setup.outputs.Tag }}'"

      - name: GitCreateTag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "${{ needs.Setup.outputs.Tag }}" -m "${{ needs.Setup.outputs.Tag }}"
          git push origin "${{ needs.Setup.outputs.Tag }}"

  CreateRelease:
    needs: CreateTag
    runs-on: ubuntu-latest
    steps:
      - name: CreateGitHubRelease
        run: |
          gh release create "${{ needs.Setup.outputs.Tag }}" \
            --title "${{ needs.Setup.outputs.Tag }}" \
            --notes "Release ${{ needs.Setup.outputs.Tag }}" \
            --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  SuccessNotice:
    needs: CreateRelease
    runs-on: ubuntu-latest
    steps:
      - name: OutputSuccessInfo
        run: |
          PACKAGE_NAME=$(toml get Cargo.toml package.name --raw)
          echo "‚úÖ Released version ${{ needs.Setup.outputs.Version }}"
          echo "üì¶ https://crates.io/crates/${PACKAGE_NAME}"
          echo "üè∑Ô∏è Tag: ${{ needs.Setup.outputs.Tag }}"
          echo "üöÄ Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.Setup.outputs.Tag }}"
