name: rust

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      exists: ${{ steps.check_tag.outputs.exists }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: install toml-cli
        run: cargo install toml-cli

      - name: read version from cargo.toml
        id: version
        run: |
          VERSION=$(toml get Cargo.toml package.version --raw)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: check if tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  test:
    needs: setup
    if: needs.setup.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: run tests with retry
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 6
          retry_on: error
          command: cargo test --all-features -- --nocapture

  fmt:
    needs: setup
    if: needs.setup.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: check formatting with retry
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 6
          retry_on: error
          command: cargo fmt -- --check

  clippy:
    needs: setup
    if: needs.setup.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: run clippy with retry
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 6
          retry_on: error
          command: cargo clippy --all-features -- -A warnings

  build:
    needs: setup
    if: needs.setup.outputs.exists == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: build release with retry
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 6
          retry_on: error
          command: cargo check --release --all-features

  release:
    needs: [test, fmt, clippy, build]
    if: needs.test.result == 'success' &&
      needs.fmt.result == 'success' &&
      needs.clippy.result == 'success' &&
      needs.build.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: publish to crates.io with retry
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 6
          retry_on: error
          command: |
            if [ -z "$CARGO_REGISTRY_TOKEN" ]; then
              echo "Error: CARGO_REGISTRY_TOKEN is not set"
              exit 1
            fi
            echo "Logging in to crates.io..."
            cargo login "$CARGO_REGISTRY_TOKEN"
            echo "Publishing to crates.io..."
            cargo publish --allow-dirty
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: create and push tag with retry
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 6
          retry_on: error
          command: |
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git tag -a "${{ needs.setup.outputs.tag }}" -m "${{ needs.setup.outputs.tag }}"
            git push origin "${{ needs.setup.outputs.tag }}"

      - name: install github cli
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: create github release with retry
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 6
          retry_on: error
          command: |
            if gh release view "${{ needs.setup.outputs.tag }}" 2>/dev/null; then
              echo "Release already exists, skipping creation"
            else
              gh release create "${{ needs.setup.outputs.tag }}" \
                --title "${{ needs.setup.outputs.tag }}" \
                --notes "Release ${{ needs.setup.outputs.tag }}" \
                --latest
            fi
            gh release view "${{ needs.setup.outputs.tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: fallback - create release via api
        run: |
          echo "Attempting to create release via GitHub API as fallback..."
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{
              "tag_name": "${{ needs.setup.outputs.tag }}",
              "target_commitish": "${{ github.sha }}",
              "name": "${{ needs.setup.outputs.tag }}",
              "body": "Release ${{ needs.setup.outputs.tag }}",
              "draft": false,
              "prerelease": false,
              "make_latest": "true"
            }' || echo "Fallback API call failed or release already exists"

      - name: success notification
        run: |
          PACKAGE_NAME=$(toml get Cargo.toml package.name --raw)
          echo "‚úÖ Successfully released version ${{ needs.setup.outputs.version }}"
          echo "üì¶ Published to crates.io: https://crates.io/crates/${PACKAGE_NAME}"
          echo "üè∑Ô∏è Created tag: ${{ needs.setup.outputs.tag }}"
          echo "üöÄ GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.setup.outputs.tag }}"
          echo ""
          echo "You can view the release at:"
          echo "${{ github.server_url }}/${{ github.repository }}/releases"
